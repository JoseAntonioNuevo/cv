---
import LanguageSwitcher from './LanguageSwitcher.astro';
import ThemeToggle from './ThemeToggle.tsx';
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const navItems = [
  { href: '#home', label: t('nav.home') },
  { href: '#experience', label: t('nav.experience') },
  { href: '#skills', label: t('nav.skills') },
  { href: '#education', label: t('nav.education') },
  { href: '#certifications', label: t('nav.certifications') },
  { href: '#projects', label: t('nav.projects') },
  { href: '#contact', label: t('nav.contact') },
];
---

<header class="fixed top-0 w-full bg-white/95 dark:bg-gray-900/95 backdrop-blur-md border-b border-gray-200 dark:border-gray-800 z-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <a href="#home" class="group flex items-center">
        <div class="relative overflow-hidden rounded-full w-10 h-10 ring-2 ring-indigo-600/20 group-hover:ring-indigo-600/40 transition-all duration-300">
          <img 
            src="/jan.webp" 
            alt="JAN Logo" 
            class="w-full h-full object-cover transform group-hover:scale-110 transition-transform duration-300"
          />
          <div class="absolute inset-0 bg-gradient-to-tr from-indigo-600/10 to-purple-600/10 group-hover:from-indigo-600/20 group-hover:to-purple-600/20 transition-all duration-300"></div>
        </div>
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex items-center space-x-1">
        {navItems.map((item) => (
          <a
            href={item.href}
            class="nav-link relative px-4 py-2 text-gray-700 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400 font-medium transition-colors duration-200 group"
          >
            <span class="relative z-10">{item.label}</span>
            <div class="absolute inset-0 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg scale-0 group-hover:scale-100 transition-transform duration-200 ease-out"></div>
          </a>
        ))}
      </nav>

      <!-- Right side controls -->
      <div class="flex items-center space-x-4">
        <!-- Desktop controls -->
        <div class="hidden lg:flex items-center">
          <LanguageSwitcher />
          <div class="h-6 w-px bg-gray-300 dark:bg-gray-600 mx-6"></div>
          <ThemeToggle client:load />
        </div>

        <!-- Mobile menu button -->
        <button
          id="mobile-menu-button"
          class="lg:hidden p-2 rounded-lg text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          aria-label="Toggle navigation menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation Menu -->
    <div id="mobile-menu" class="hidden lg:hidden">
      <div class="py-4 space-y-1">
        {navItems.map((item) => (
          <a
            href={item.href}
            class="mobile-nav-link block px-4 py-3 text-gray-700 dark:text-gray-300 hover:bg-indigo-50 dark:hover:bg-indigo-900/20 hover:text-indigo-600 dark:hover:text-indigo-400 rounded-lg transition-all duration-200 font-medium"
          >
            {item.label}
          </a>
        ))}
        
        <!-- Mobile controls -->
        <div class="flex items-center justify-center px-4 pt-4 mt-4 border-t border-gray-200 dark:border-gray-700">
          <LanguageSwitcher />
          <div class="h-6 w-px bg-gray-300 dark:bg-gray-600 mx-6"></div>
          <ThemeToggle client:load />
        </div>
      </div>
    </div>
  </div>
</header>

<style>
  /* Smooth underline animation for desktop nav */
  .nav-link::after {
    content: '';
    position: absolute;
    bottom: 8px;
    left: 50%;
    width: 0;
    height: 2px;
    background: linear-gradient(to right, #4f46e5, #9333ea);
    transform: translateX(-50%);
    transition: width 0.3s ease;
  }

  .nav-link:hover::after {
    width: calc(100% - 32px);
  }

  /* Mobile menu animation */
  #mobile-menu {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
  }

  #mobile-menu.show {
    max-height: 500px;
    transition: max-height 0.5s ease-in;
  }
</style>

<script>
  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('show');
    mobileMenu?.classList.toggle('hidden');
    
    // Animate hamburger icon
    const icon = mobileMenuButton.querySelector('svg');
    if (mobileMenu?.classList.contains('show')) {
      icon?.classList.add('rotate-90');
    } else {
      icon?.classList.remove('rotate-90');
    }
  });

  // Close mobile menu when clicking a link
  mobileNavLinks.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.remove('show');
      mobileMenu?.classList.add('hidden');
      const icon = mobileMenuButton?.querySelector('svg');
      icon?.classList.remove('rotate-90');
    });
  });

  // Smooth scrolling for navigation links
  document.querySelectorAll('.nav-link, .mobile-nav-link').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const targetId = (e.currentTarget as HTMLAnchorElement).getAttribute('href');
      if (targetId && targetId !== '#') {
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
          const headerOffset = 80;
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }
      }
    });
  });

  // Add active state based on scroll position
  const sections = document.querySelectorAll('section[id], main[id]');
  const navLinks = document.querySelectorAll('.nav-link, .mobile-nav-link');

  function updateActiveLink() {
    const scrollPosition = window.scrollY + 100;

    sections.forEach(section => {
      const sectionTop = section.offsetTop;
      const sectionHeight = section.offsetHeight;
      const sectionId = section.getAttribute('id');

      if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
        navLinks.forEach(link => {
          link.classList.remove('text-indigo-600', 'dark:text-indigo-400');
          if (link.getAttribute('href') === `#${sectionId}`) {
            link.classList.add('text-indigo-600', 'dark:text-indigo-400');
          }
        });
      }
    });
  }

  window.addEventListener('scroll', updateActiveLink);
  updateActiveLink();
</script>