---
import { useTranslations, getLangFromUrl } from '../i18n/utils';
import studiesData from '../data/studies.json';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

interface Study {
  degree: string;
  institution: string;
  year: string;
  description: string;
  icon: string;
  logo?: string;
}

const studies: Study[] = studiesData.map(study => ({
  degree: t(study.degree_key),
  institution: t(study.institution_key),
  year: t(study.year_key),
  description: t(study.description_key),
  icon: study.icon,
  logo: study.logo
}));
---

<section id="education" class="education-section py-12 sm:py-16 px-4">
  <div class="max-w-6xl mx-auto">
    <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold mb-8 sm:mb-12 text-gray-900 dark:text-white text-center">
      {t('education.title')}
    </h2>

    <div class="relative">
      <!-- Timeline line -->
      <div class="absolute left-6 sm:left-8 md:left-1/2 transform md:-translate-x-1/2 h-full w-0.5 bg-gradient-to-b from-blue-500 via-indigo-500 to-purple-500"></div>

      <div class="space-y-8 sm:space-y-12">
        {studies.map((study, index) => (
          <div class={`relative flex items-center ${index % 2 === 0 ? 'md:flex-row' : 'md:flex-row-reverse'} flex-col md:flex-row`}>
            <!-- Timeline dot -->
            <div class="absolute left-6 sm:left-8 md:left-1/2 transform md:-translate-x-1/2 -translate-y-4 md:translate-y-0">
              <div class="relative">
                <div class="w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center shadow-lg animate-pulse-subtle">
                  <span class="text-base sm:text-lg">{study.icon}</span>
                </div>
                <div class="absolute inset-0 bg-blue-400 rounded-full animate-ping opacity-20"></div>
              </div>
            </div>

            <!-- Content card -->
            <div class={`w-full md:w-5/12 ${index % 2 === 0 ? 'md:pr-12' : 'md:pl-12'} pl-14 sm:pl-20 md:pl-0`}>
              <div class="group relative bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 border border-gray-100 dark:border-gray-700">
                <!-- Year badge -->
                <div class={`absolute -top-3 ${index % 2 === 0 ? 'md:right-6' : 'md:left-6'} left-4 sm:left-6`}>
                  <span class="inline-flex items-center px-2 sm:px-3 py-0.5 sm:py-1 rounded-full text-xs sm:text-sm font-semibold bg-gradient-to-r from-blue-500 to-indigo-600 text-white shadow-md">
                    {study.year}
                  </span>
                </div>

                <!-- Study content with logo -->
                <div class="pt-3 sm:pt-4">
                  <div class="flex items-start gap-3 sm:gap-4 mb-3 sm:mb-4">
                    <!-- Institution logo -->
                    <div class="flex-shrink-0 w-12 h-12 sm:w-16 sm:h-16 bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden shadow-md">
                      {study.logo ? (
                        <img
                          src={study.logo}
                          alt={`${study.institution} logo`}
                          class="w-full h-full object-contain p-1.5 sm:p-2"
                          loading="lazy"
                        />
                      ) : (
                        <div class="w-full h-full flex items-center justify-center text-gray-400 dark:text-gray-500">
                          <span class="text-lg sm:text-2xl">{study.icon}</span>
                        </div>
                      )}
                    </div>

                    <!-- Study details -->
                    <div class="flex-1">
                      <h3 class="text-base sm:text-xl font-bold text-gray-900 dark:text-white mb-1 sm:mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                        {study.degree}
                      </h3>
                      <p class="text-sm sm:text-lg text-indigo-600 dark:text-indigo-400 font-medium flex items-center gap-1 sm:gap-2">
                        <svg class="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                        </svg>
                        <span class="break-words">{study.institution}</span>
                      </p>
                    </div>
                  </div>

                  <div class="study-description-container">
                    <div class="text-sm sm:text-base text-gray-600 dark:text-gray-300 leading-relaxed study-description" data-full-text={study.description}>
                      <div class="description-preview"></div>
                      <div class="description-full hidden whitespace-pre-line"></div>
                    </div>
                    <button class="see-more-btn mt-3 inline-flex items-center gap-1 text-sm font-medium text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 rounded-md px-1">
                      <span class="btn-text">{t('education.seeMore')}</span>
                      <svg class="w-3 h-3 transition-transform duration-300 chevron" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                      </svg>
                    </button>
                  </div>
                </div>

                <!-- Decorative gradient -->
                <div class="absolute inset-0 rounded-xl bg-gradient-to-br from-blue-500/5 to-indigo-600/5 opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none"></div>
              </div>
            </div>

            <!-- Spacer for alternating layout -->
            <div class="hidden md:block md:w-5/12"></div>
          </div>
        ))}
      </div>
    </div>

    <!-- Background decoration -->
    <div class="absolute inset-0 -z-10 overflow-hidden">
      <div class="absolute -top-40 -right-40 w-80 h-80 bg-blue-500/10 rounded-full blur-3xl"></div>
      <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-indigo-500/10 rounded-full blur-3xl"></div>
    </div>
  </div>
</section>

<style>
  .education-section {
    @apply relative overflow-hidden;
  }

  @keyframes pulse-subtle {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.8;
    }
  }

  .animate-pulse-subtle {
    animation: pulse-subtle 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .education-section .absolute.left-8 {
      left: 2rem;
    }
  }

  /* Expandable description styles */
  .study-description {
    overflow: hidden;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .description-full {
    line-height: 1.7;
    opacity: 0;
    max-height: 0;
    overflow: hidden;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .description-preview {
    line-height: 1.6;
  }

  .description-full.expanded {
    opacity: 1;
    max-height: 280px;
    overflow-y: auto;
    padding-right: 8px;
  }

  /* Custom scrollbar styling */
  .description-full.expanded::-webkit-scrollbar {
    width: 4px;
  }

  .description-full.expanded::-webkit-scrollbar-track {
    background: transparent;
  }

  .description-full.expanded::-webkit-scrollbar-thumb {
    background: linear-gradient(180deg, #3b82f6, #6366f1);
    border-radius: 2px;
  }

  .description-full.expanded::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(180deg, #2563eb, #4f46e5);
  }

  /* Firefox scrollbar */
  .description-full.expanded {
    scrollbar-width: thin;
    scrollbar-color: #3b82f6 transparent;
  }

  /* Mobile adjustments for scrollable content */
  @media (max-width: 768px) {
    .description-full.expanded {
      max-height: 240px;
      padding-right: 6px;
    }
    
    .description-full.expanded::-webkit-scrollbar {
      width: 3px;
    }
  }

  .see-more-btn {
    position: relative;
    overflow: hidden;
  }

  .see-more-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s;
  }

  .see-more-btn:hover::before {
    left: 100%;
  }

  .chevron.rotated {
    transform: rotate(180deg);
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .fade-in-up {
    animation: fadeInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize descriptions
    const descriptions = document.querySelectorAll('.study-description');
    const seeMoreText = document.documentElement.lang === 'es' ? 'Ver mÃ¡s' : 'See more';
    const seeLessText = document.documentElement.lang === 'es' ? 'Ver menos' : 'See less';
    
    descriptions.forEach((desc) => {
      const fullText = desc.getAttribute('data-full-text') || '';
      const previewElement = desc.querySelector('.description-preview');
      const fullElement = desc.querySelector('.description-full');
      
      // Get text before first colon and newline for preview
      const colonIndex = fullText.indexOf(':');
      const previewText = colonIndex > 0 && colonIndex < 150 ? 
        fullText.substring(0, colonIndex + 1) + '...' : 
        fullText.substring(0, 120) + '...';
      
      if (previewElement && fullElement) {
        previewElement.textContent = previewText;
        fullElement.textContent = fullText;
      }
    });

    // Add click handlers to see more buttons
    const buttons = document.querySelectorAll('.see-more-btn');
    
    buttons.forEach((button) => {
      button.addEventListener('click', function(this: HTMLButtonElement) {
        const container = this.closest('.study-description-container') as HTMLElement;
        const fullElement = container.querySelector('.description-full') as HTMLElement;
        const previewElement = container.querySelector('.description-preview') as HTMLElement;
        const btnText = this.querySelector('.btn-text') as HTMLElement;
        const chevron = this.querySelector('.chevron') as HTMLElement;
        
        const isExpanded = fullElement.classList.contains('expanded');
        
        if (isExpanded) {
          // Collapse
          fullElement.classList.remove('expanded');
          fullElement.classList.add('hidden');
          previewElement.classList.remove('hidden');
          btnText.textContent = seeMoreText;
          chevron.classList.remove('rotated');
        } else {
          // Expand
          previewElement.classList.add('hidden');
          fullElement.classList.remove('hidden');
          // Small delay to ensure DOM update before adding expanded class
          setTimeout(() => {
            fullElement.classList.add('expanded', 'fade-in-up');
          }, 10);
          btnText.textContent = seeLessText;
          chevron.classList.add('rotated');
        }
      });
    });
  });
</script>
