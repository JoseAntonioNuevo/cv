---
import { useTranslations } from '../i18n/utils';
import type { Language } from '../i18n/translations';
export interface Props { lang: string; }
const { lang = 'en' } = Astro.props;
const t = useTranslations(lang as Language);

function parsePeriod(period: string, presentText: string): number {
  // Handles periods like "Feb 2025 - Present" or "Aug 2020 - Jan 2022"
  const [start, end] = period.split(' - ').map((s: string) => s.trim());
  // If end is 'Present' or translated equivalent, treat as far future
  const monthMap: Record<string, string> = {Jan: '01',Feb: '02',Mar: '03',Apr: '04',May: '05',Jun: '06',Jul: '07',Aug: '08',Sep: '09',Oct: '10',Nov: '11',Dec: '12'};
  if (end === 'Present' || end === presentText) return new Date(3000, 0, 1).getTime();
  // Convert e.g. "Feb 2025" to "2025-02-01"
  const [month, year] = end.split(' ');
  const formatted = `${year}-${monthMap[month]}-01`;
  return new Date(formatted).getTime();
}

function getExperiences(t: any) {
  return [
    {
      company: "Recovo",
      location: t('experience.companies.recovo.location'),
      logo: "/experience/recovo.webp",
      technologies: ["Next.js", "Laravel", "Python", "TypeScript", "AWS", "PostgreSQL", "Docker", "Redis", "Git"],
      positions: [
        {
          title: t('experience.companies.recovo.positions.fullstack'),
          period: "Oct 2022 - Feb 2025",
          description: t('experience.companies.recovo.descriptions.fullstack'),
          achievements: [
            t('experience.companies.recovo.achievements.fullstack')
          ]
        },
        {
          title: t('experience.companies.recovo.positions.techlead'),
          period: `Feb 2025 - ${t('experience.present')}`,
          description: t('experience.companies.recovo.descriptions.techlead'),
          achievements: [
            t('experience.companies.recovo.achievements.techlead')
          ]
        }
      ]
    },
    {
      company: "Acceleralia",
      location: t('experience.companies.acceleralia.location'),
      logo: "/experience/acceleralia.webp",
      technologies: ["Vue.js", "Laravel", "MySQL", "Docker", "Linux Server", "Digital Ocean", "Git", "AI"],
      positions: [
        {
          title: t('experience.companies.acceleralia.positions.fullstack'),
          period: "Aug 2020 - Jan 2022",
          description: t('experience.companies.acceleralia.descriptions.fullstack'),
          achievements: [
            t('experience.companies.acceleralia.achievements.fullstack')
          ]
        },
        {
          title: t('experience.companies.acceleralia.positions.techlead'),
          period: "Jan 2022 - Oct 2022",
          description: t('experience.companies.acceleralia.descriptions.techlead'),
          achievements: [
            t('experience.companies.acceleralia.achievements.techlead')
          ]
        },
        {
          title: t('experience.companies.acceleralia.positions.parttime'),
          period: "Oct 2022 - Jul 2025",
          description: t('experience.companies.acceleralia.descriptions.parttime'),
          achievements: [
            t('experience.companies.acceleralia.achievements.parttime')
          ]
        }
      ]
    }
  ];
}

const experiences = getExperiences(t);

// Sort positions within each experience (most recent first)
const presentText = t('experience.present');
experiences.forEach((exp) => {
  exp.positions.sort((a, b) => parsePeriod(b.period, presentText) - parsePeriod(a.period, presentText));
});
// Sort experiences (most recent position first)
experiences.sort((a, b) => parsePeriod(b.positions[0].period, presentText) - parsePeriod(a.positions[0].period, presentText));
---

<section id="experience" class="experience-section">
  <h2 class="text-3xl font-bold mb-8 text-gray-800 dark:text-gray-100">{t('experience.title')}</h2>

  <div class="space-y-8">
    {experiences.map((exp) => (
      <article class="experience-item relative pl-8 pb-8 border-l-2 border-gray-300 dark:border-gray-700 last:border-0 last:pb-0">
        <div class="absolute -left-[9px] top-0 w-4 h-4 bg-blue-500 rounded-full border-4 border-white dark:border-gray-900"></div>

        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow">
          <div class="flex items-start gap-4 mb-4">
            <div class="flex-shrink-0 w-16 h-16 bg-black rounded-lg flex items-center justify-center">
              {exp.logo ? (
                <img src={exp.logo} alt={`${exp.company} logo`} class="w-12 h-12 object-contain" />
              ) : (
                <div class="w-12 h-12 bg-gray-300 dark:bg-gray-600 rounded-lg flex items-center justify-center">
                  <span class="text-gray-500 dark:text-gray-400 text-xs font-medium">{exp.company.charAt(0)}</span>
                </div>
              )}
            </div>
            <div class="flex-1">
              <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-2">
                <div>
                  <p class="text-lg text-blue-600 dark:text-blue-400">{exp.company}</p>
                  {exp.location && (
                    <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">{exp.location}</p>
                  )}
                </div>
              </div>
            </div>
          </div>

          {exp.positions.map((pos) => (
            <div class="mb-6 last:mb-0">
              <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-2">
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white">{pos.title}</h3>
                <span class="text-sm text-gray-500 dark:text-gray-400 mt-2 sm:mt-0">{pos.period}</span>
              </div>
              {pos.description && (
                <p class="text-gray-700 dark:text-gray-300 mb-3">{pos.description}</p>
              )}
              {pos.achievements && pos.achievements.length > 0 && (
                <ul class="list-disc list-inside space-y-1 mb-3">
                  {pos.achievements.map((achievement) => (
                    <li class="text-gray-700 dark:text-gray-300">{achievement}</li>
                  ))}
                </ul>
              )}
            </div>
          ))}

          {exp.technologies && exp.technologies.length > 0 && (
            <div class="flex flex-wrap gap-2 mt-4">
              {exp.technologies.map((tech) => (
                <span class="px-3 py-1 text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full">
                  {tech}
                </span>
              ))}
            </div>
          )}
        </div>
      </article>
    ))}
  </div>

</section>

<style>
  .experience-section {
    @apply max-w-4xl mx-auto;
  }

  .experience-item:hover .absolute {
    @apply scale-125;
    transition: transform 0.2s ease;
  }
</style>
