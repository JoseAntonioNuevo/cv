---
import { useTranslations } from '../i18n/utils';
import type { Language } from '../i18n/translations';
import experienceData from '../data/experience.json';

export interface Props { lang: string; }
const { lang = 'en' } = Astro.props;
const t = useTranslations(lang as Language);

function parsePeriod(period: string, presentText: string): number {
  // Handles periods like "Feb 2025 - Present" or "Aug 2020 - Jan 2022"
  const [start, end] = period.split(' - ').map((s: string) => s.trim());
  // If end is 'Present' or translated equivalent, treat as far future
  const monthMap: Record<string, string> = {Jan: '01',Feb: '02',Mar: '03',Apr: '04',May: '05',Jun: '06',Jul: '07',Aug: '08',Sep: '09',Oct: '10',Nov: '11',Dec: '12'};
  if (end === 'Present' || end === presentText) return new Date(3000, 0, 1).getTime();
  // Convert e.g. "Feb 2025" to "2025-02-01"
  const [month, year] = end.split(' ');
  const formatted = `${year}-${monthMap[month]}-01`;
  return new Date(formatted).getTime();
}

// Transform JSON data with translations
const experiences = experienceData.map((exp) => ({
  company: exp.company,
  location: t(exp.locationKey as any),
  logo: exp.logo,
  technologies: exp.technologies,
  positions: exp.positions.map((pos) => ({
    title: t(pos.titleKey as any),
    period: pos.period === "Feb 2025 - Present" ? `Feb 2025 - ${t('experience.present')}` : pos.period,
    description: t(pos.descriptionKey as any),
    achievements: pos.achievementsKeys.map((key) => t(key as any))
  }))
}));

// Sort positions within each experience (most recent first)
const presentText = t('experience.present');
experiences.forEach((exp) => {
  exp.positions.sort((a, b) => parsePeriod(b.period, presentText) - parsePeriod(a.period, presentText));
});
// Sort experiences (most recent position first)
experiences.sort((a, b) => parsePeriod(b.positions[0].period, presentText) - parsePeriod(a.positions[0].period, presentText));
---

<section id="experience" class="experience-section py-12 sm:py-16 px-4">
  <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold mb-8 sm:mb-10 text-gray-800 dark:text-gray-100 text-center">{t('experience.title')}</h2>

  <div class="space-y-8">
    {experiences.map((exp) => (
      <article class="experience-item relative pl-6 sm:pl-8 pb-8 border-l-2 border-gray-300 dark:border-gray-700 last:border-0 last:pb-0">
        <div class="absolute -left-[9px] top-0 w-4 h-4 bg-blue-500 rounded-full border-4 border-white dark:border-gray-900"></div>

        <div class="bg-white dark:bg-gray-800 rounded-lg p-4 sm:p-6 shadow-sm hover:shadow-md transition-shadow">
          <div class="flex items-start gap-3 sm:gap-4 mb-4">
            <div class="flex-shrink-0 w-12 h-12 sm:w-16 sm:h-16 bg-black rounded-lg flex items-center justify-center">
              {exp.logo ? (
                <img src={exp.logo} alt={`${exp.company} logo`} class="w-10 h-10 sm:w-12 sm:h-12 object-contain" loading="lazy" />
              ) : (
                <div class="w-10 h-10 sm:w-12 sm:h-12 bg-gray-300 dark:bg-gray-600 rounded-lg flex items-center justify-center">
                  <span class="text-gray-500 dark:text-gray-400 text-xs font-medium">{exp.company.charAt(0)}</span>
                </div>
              )}
            </div>
            <div class="flex-1">
              <div class="flex flex-col">
                <div>
                  <p class="text-base sm:text-lg font-semibold text-blue-600 dark:text-blue-400">{exp.company}</p>
                  {exp.location && (
                    <p class="text-xs sm:text-sm text-gray-600 dark:text-gray-400 mt-0.5">{exp.location}</p>
                  )}
                </div>
              </div>
            </div>
          </div>

          {exp.positions.map((pos) => (
            <div class="mb-4 sm:mb-6 last:mb-0">
              <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-2">
                <h3 class="text-lg sm:text-xl font-semibold text-gray-900 dark:text-white">{pos.title}</h3>
                <span class="text-xs sm:text-sm text-gray-500 dark:text-gray-400 mt-1 sm:mt-0">{pos.period}</span>
              </div>
              {pos.description && (
                <p class="text-sm sm:text-base text-gray-700 dark:text-gray-300 mb-2 sm:mb-3">{pos.description}</p>
              )}
              {pos.achievements && pos.achievements.length > 0 && (
                <ul class="list-disc list-inside space-y-1 mb-2 sm:mb-3">
                  {pos.achievements.map((achievement) => (
                    <li class="text-sm sm:text-base text-gray-700 dark:text-gray-300">{achievement}</li>
                  ))}
                </ul>
              )}
            </div>
          ))}

          {exp.technologies && exp.technologies.length > 0 && (
            <div class="flex flex-wrap gap-1.5 sm:gap-2 mt-3 sm:mt-4">
              {exp.technologies.map((tech) => (
                <span class="tech-tag px-2 sm:px-3 py-0.5 sm:py-1 text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full cursor-pointer">
                  {tech}
                </span>
              ))}
            </div>
          )}
        </div>
      </article>
    ))}
  </div>

</section>

<style>
  .experience-section {
    @apply max-w-4xl mx-auto;
  }

  .experience-item:hover .absolute {
    @apply scale-125;
    transition: transform 0.2s ease;
  }

  .tech-tag {
    position: relative;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
  }

  .tech-tag::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.1));
    border-radius: inherit;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .tech-tag:hover {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .tech-tag:hover::before {
    opacity: 1;
  }

  .dark .tech-tag:hover {
    @apply bg-gray-600;
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.2);
  }

  .tech-tag:active {
    transform: translateY(0) scale(0.98);
    transition: transform 0.1s ease;
  }
</style>
